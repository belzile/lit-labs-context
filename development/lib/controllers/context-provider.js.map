{"version":3,"file":"context-provider.js","sourceRoot":"","sources":["../../../src/lib/controllers/context-provider.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAC,aAAa,EAAC,MAAM,sBAAsB,CAAC;AAanD,MAAM,OAAO,oBAEX,SAAQ,KAAK;IACb;;;OAGG;IACH,YAAmC,OAAgB;QACjD,KAAK,CAAC,kBAAkB,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAD1B,YAAO,GAAP,OAAO,CAAS;IAEnD,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,OAAO,eACX,SAAQ,aAA6B;IAGrC,YACY,IAAqB,EACvB,OAAU,EAClB,YAA6B;QAE7B,KAAK,CAAC,YAAY,CAAC,CAAC;QAJV,SAAI,GAAJ,IAAI,CAAiB;QACvB,YAAO,GAAP,OAAO,CAAG;QAQb,qBAAgB,GAAG,CACxB,EAAqD,EAC/C,EAAE;YACR,IAAI,EAAE,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;gBAC/B,OAAO;aACR;YACD,EAAE,CAAC,eAAe,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC;QAC9C,CAAC,CAAC;QAZA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAYO,eAAe;QACrB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACvE,CAAC;IAED,aAAa;QACX,mEAAmE;QACnE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextRequestEvent} from '../context-request-event.js';\nimport {ContextKey, ContextType} from '../context-key.js';\nimport {ValueNotifier} from '../value-notifier.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-provider' event can be emitted by any element which hosts\n     * a context provider to indicate it is available for use.\n     */\n    'context-provider': ContextProviderEvent<ContextKey<unknown, unknown>>;\n  }\n}\n\nexport class ContextProviderEvent<\n  Context extends ContextKey<unknown, unknown>\n> extends Event {\n  /**\n   *\n   * @param context the context which this provider can provide\n   */\n  public constructor(public readonly context: Context) {\n    super('context-provider', {bubbles: true, composed: true});\n  }\n}\n\n/**\n * A ReactiveController which can add context provider behavior to a\n * custom-element.\n *\n * This controller simply listens to the `context-request` event when\n * the host is connected to the DOM and registers the received callbacks\n * against its observable Context implementation.\n */\nexport class ContextProvider<T extends ContextKey<unknown, unknown>>\n  extends ValueNotifier<ContextType<T>>\n  implements ReactiveController\n{\n  constructor(\n    protected host: ReactiveElement,\n    private context: T,\n    initialValue?: ContextType<T>\n  ) {\n    super(initialValue);\n    this.host.addController(this);\n    this.attachListeners();\n  }\n\n  public onContextRequest = (\n    ev: ContextRequestEvent<ContextKey<unknown, unknown>>\n  ): void => {\n    if (ev.context !== this.context) {\n      return;\n    }\n    ev.stopPropagation();\n    this.addCallback(ev.callback, ev.subscribe);\n  };\n\n  private attachListeners() {\n    this.host.addEventListener('context-request', this.onContextRequest);\n  }\n\n  hostConnected(): void {\n    // emit an event to signal a provider is available for this context\n    this.host.dispatchEvent(new ContextProviderEvent(this.context));\n  }\n}\n"]}