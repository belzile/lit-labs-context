{"version":3,"file":"context-provider.js","sourceRoot":"","sources":["../../../src/lib/decorators/context-provider.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAGH,OAAO,EAAC,gBAAgB,EAAC,MAAM,0CAA0C,CAAC;AAE1E,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAC;AAEnE;;;;;GAKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,UAAU,eAAe,CAAY,EACzC,OAAO,EAAE,OAAO,GAGjB;IAMC,OAAO,gBAAgB,CAAC;QACtB,QAAQ,EAAE,CAAC,IAA4B,EAAE,IAAiB,EAAE,EAAE;YAC5D,IAAI,UAA2D,CAAC;YAChE,IAAI,CAAC,cAAc,CAAC,CAAC,OAAwB,EAAQ,EAAE;gBACrD,8DAA8D;gBAC9D,UAAU,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YACH,4DAA4D;YAC5D,4CAA4C;YAC5C,MAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACzE,MAAM,SAAS,GAAG,UAAU,EAAE,GAAG,CAAC;YAClC,MAAM,aAAa,GAAG;gBACpB,GAAG,UAAU;gBACb,GAAG,EAAE,UAAU,KAAgB;oBAC7B,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC5B,IAAI,SAAS,EAAE;wBACb,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;qBAC7B;gBACH,CAAC;aACF,CAAC;YACF,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAC7D,CAAC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {ContextKey} from '../context-key.js';\nimport {ContextProvider} from '../controllers/context-provider.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param multiple An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * import {loggerContext} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @contextProvided(loggerContext)\n *   logger;\n *\n *   doThing() {\n *     this.logger.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function contextProvider<ValueType>({\n  context: context,\n}: {\n  context: ContextKey<unknown, ValueType>;\n}): <K extends PropertyKey>(\n  protoOrDescriptor: ReactiveElement & Record<K, ValueType>,\n  name?: K\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => void | any {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      let controller: ContextProvider<ContextKey<unknown, ValueType>>;\n      ctor.addInitializer((element: ReactiveElement): void => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        controller = new ContextProvider(element, context);\n      });\n      // proxy any existing setter for this property and use it to\n      // notify the controller of an updated value\n      const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);\n      const oldSetter = descriptor?.set;\n      const newDescriptor = {\n        ...descriptor,\n        set: function (value: ValueType) {\n          controller?.setValue(value);\n          if (oldSetter) {\n            oldSetter.call(this, value);\n          }\n        },\n      };\n      Object.defineProperty(ctor.prototype, name, newDescriptor);\n    },\n  });\n}\n"]}