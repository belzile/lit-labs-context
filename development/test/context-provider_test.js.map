{"version":3,"file":"context-provider_test.js","sourceRoot":"","sources":["../../src/test/context-provider_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAiB,MAAM,KAAK,CAAC;AACrD,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAC;AAGpD,OAAO,EAAC,eAAe,EAAC,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAC,eAAe,EAAC,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAC,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAExC,MAAM,aAAa,GAAG,gBAAwD,CAAC;AAE/E,MAAM,sBAAuB,SAAQ,UAAU;IAA/C;;QAGS,UAAK,GAAG,CAAC,CAAC;IAKnB,CAAC;IAHW,MAAM;QACd,OAAO,IAAI,CAAA,0BAA0B,IAAI,CAAC,KAAK,SAAS,CAAC;IAC3D,CAAC;CACF;AALC;IAFC,eAAe,CAAC,EAAC,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;IAC1D,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;qDACR;AAMnB,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;AAElE,MAAM,sBAAuB,SAAQ,UAAU;IAA/C;;QAGS,UAAK,GAAG,CAAC,CAAC;IASnB,CAAC;IAPW,MAAM;QACd,OAAO,IAAI,CAAA;;;;KAIV,CAAC;IACJ,CAAC;CACF;AATC;IAFC,eAAe,CAAC,EAAC,OAAO,EAAE,aAAa,EAAC,CAAC;IACzC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;qDACvB;AAUnB,cAAc,CAAC,MAAM,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;AAElE,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC5B,IAAI,QAAgC,CAAC;IACrC,IAAI,QAAgC,CAAC;IACrC,IAAI,SAAsB,CAAC;IAC3B,KAAK,CAAC,KAAK,IAAI,EAAE;QACf,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,SAAS,CAAC,SAAS,GAAG;;;;KAIrB,CAAC;QACF,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAErC,QAAQ,GAAG,SAAS,CAAC,aAAa,CAChC,kBAAkB,CACO,CAAC;QAE5B,QAAQ,GAAG,SAAS,CAAC,aAAa,CAChC,kBAAkB,CACO,CAAC;QAE5B,MAAM,QAAQ,CAAC,cAAc,CAAC;QAC9B,MAAM,QAAQ,CAAC,cAAc,CAAC;QAE9B,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAG,EAAE;QACZ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACzC,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC;QACrB,MAAM,QAAQ,CAAC,cAAc,CAAC;QAC9B,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators/property.js';\n\nimport {ContextKey} from '../index.js';\nimport {contextProvided} from '../lib/decorators/context-provided.js';\nimport {contextProvider} from '../lib/decorators/context-provider.js';\nimport {assert} from '@esm-bundle/chai';\n\nconst simpleContext = 'simple-context' as ContextKey<'simple-context', number>;\n\nclass ContextConsumerElement extends LitElement {\n  @contextProvided({context: simpleContext, subscribe: true})\n  @property({type: Number})\n  public value = 0;\n\n  protected render(): TemplateResult {\n    return html`Value <span id=\"value\">${this.value}</span>`;\n  }\n}\ncustomElements.define('context-consumer', ContextConsumerElement);\n\nclass ContextProviderElement extends LitElement {\n  @contextProvider({context: simpleContext})\n  @property({type: Number, reflect: true})\n  public value = 0;\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        <slot></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define('context-provider', ContextProviderElement);\n\nsuite('@contextRequest', () => {\n  let consumer: ContextConsumerElement;\n  let provider: ContextProviderElement;\n  let container: HTMLElement;\n  setup(async () => {\n    container = document.createElement('div');\n    container.innerHTML = `\n        <context-provider value=\"1000\">            \n            <context-consumer></context-consumer>\n        </context-provider>\n    `;\n    document.body.appendChild(container);\n\n    provider = container.querySelector(\n      'context-provider'\n    ) as ContextProviderElement;\n\n    consumer = container.querySelector(\n      'context-consumer'\n    ) as ContextConsumerElement;\n\n    await provider.updateComplete;\n    await consumer.updateComplete;\n\n    assert.isDefined(consumer);\n  });\n\n  teardown(() => {\n    document.body.removeChild(container);\n  });\n\n  test(`consumer receives a context`, async () => {\n    assert.strictEqual(consumer.value, 1000);\n  });\n\n  test(`consumer receives updated context on provider change`, async () => {\n    assert.strictEqual(consumer.value, 1000);\n    provider.value = 500;\n    await consumer.updateComplete;\n    assert.strictEqual(consumer.value, 500);\n  });\n});\n"]}