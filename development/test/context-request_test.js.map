{"version":3,"file":"context-request_test.js","sourceRoot":"","sources":["../../src/test/context-request_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {html, LitElement} from 'lit';\nimport {property} from 'lit/decorators/property.js';\n\nimport {ContextConsumer, ContextProvider, createContext} from '../index.js';\nimport {assert} from '@esm-bundle/chai';\nimport {contextProvided} from '../lib/decorators/context-provided.js';\n\nconst simpleContext = createContext<number>('simple-context');\n\n// @TODO: would be good to get this exported out of lit-elements\nconst stripExpressionComments = (html: string) =>\n  html.replace(/<!--\\?lit\\$[0-9]+\\$-->|<!--\\??-->/g, '');\n\nclass SimpleContextProvider extends LitElement {\n  private provider = new ContextProvider(this, simpleContext, 1000);\n\n  public setValue(value: number) {\n    this.provider.setValue(value);\n  }\n}\n\nclass SimpleContextConsumer extends LitElement {\n  // a one-time property fullfilled by context\n  @contextProvided({context: simpleContext})\n  @property({type: Number})\n  public onceValue = 0;\n\n  // a subscribed property fulfilled by context\n  @contextProvided({context: simpleContext, subscribe: true})\n  @property({type: Number})\n  public subscribedValue = 0;\n\n  // just use the controller directly\n  public controllerContext = new ContextConsumer(\n    this,\n    simpleContext,\n    undefined, // no callback\n    true // subscribe to updates\n  );\n\n  public render() {\n    return html`${this.controllerContext.value}`;\n  }\n}\n\ncustomElements.define('simple-context-consumer', SimpleContextConsumer);\ncustomElements.define('simple-context-provider', SimpleContextProvider);\n\nsuite('context-provider', () => {\n  let provider: SimpleContextProvider;\n  let consumer: SimpleContextConsumer;\n\n  setup(async () => {\n    const container = document.createElement('div');\n    container.innerHTML = `\n       <simple-context-provider>\n         <simple-context-consumer></simple-context-consumer>\n       </simple-context-provider>\n     `;\n    document.body.appendChild(container);\n\n    provider = container.querySelector(\n      'simple-context-provider'\n    ) as SimpleContextProvider;\n    assert.isDefined(provider);\n    consumer = provider.querySelector(\n      'simple-context-consumer'\n    ) as SimpleContextConsumer;\n    assert.isDefined(consumer);\n  });\n\n  test(`consumer receives a context`, async () => {\n    assert.strictEqual(consumer.onceValue, 1000);\n    assert.strictEqual(consumer.subscribedValue, 1000);\n    assert.strictEqual(consumer.controllerContext.value, 1000);\n    await consumer.updateComplete;\n    assert.equal(\n      stripExpressionComments(consumer.shadowRoot!.innerHTML),\n      '1000'\n    );\n  });\n\n  test(`consumer receives updated context on provider change`, async () => {\n    assert.strictEqual(consumer.onceValue, 1000);\n    assert.strictEqual(consumer.subscribedValue, 1000);\n    assert.strictEqual(consumer.controllerContext.value, 1000);\n    await consumer.updateComplete;\n    assert.equal(\n      stripExpressionComments(consumer.shadowRoot!.innerHTML),\n      '1000'\n    );\n    provider.setValue(500);\n    assert.strictEqual(consumer.onceValue, 1000); // once value shouldn't change\n    assert.strictEqual(consumer.subscribedValue, 500);\n    assert.strictEqual(consumer.controllerContext.value, 500);\n    await consumer.updateComplete;\n    assert.equal(\n      stripExpressionComments(consumer.shadowRoot!.innerHTML),\n      '500'\n    );\n  });\n});\n"]}