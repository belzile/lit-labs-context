{"version":3,"file":"provider-consumer_test.js","sourceRoot":"","sources":["../../src/test/provider-consumer_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators/property.js';\n\nimport {ContextProvider, ContextKey} from '../index.js';\nimport {assert} from '@esm-bundle/chai';\nimport {ContextConsumer} from '../lib/controllers/context-consumer.js';\n\nconst simpleContext = 'simple-context' as ContextKey<'simple-context', number>;\n\nclass SimpleContextProvider extends LitElement {\n  private provider = new ContextProvider(this, simpleContext, 1000);\n\n  public setValue(value: number) {\n    this.provider.setValue(value);\n  }\n}\n\nclass MultipleContextConsumer extends LitElement {\n  @property({type: Number})\n  public value = 0;\n\n  public constructor() {\n    super();\n    new ContextConsumer(\n      this,\n      simpleContext,\n      (value) => {\n        this.value = value;\n      },\n      true // allow multiple values\n    );\n  }\n\n  protected render(): TemplateResult {\n    return html`Value <span id=\"value\">${this.value}</span>`;\n  }\n}\n\nclass OnceContextConsumer extends LitElement {\n  @property({type: Number})\n  public value = 0;\n\n  public constructor() {\n    super();\n    new ContextConsumer(this, simpleContext, (value) => {\n      this.value = value;\n    });\n  }\n\n  protected render(): TemplateResult {\n    return html`Value <span id=\"value\">${this.value}</span>`;\n  }\n}\n\ncustomElements.define('multiple-context-consumer', MultipleContextConsumer);\ncustomElements.define('once-context-consumer', OnceContextConsumer);\ncustomElements.define('simple-context-provider', SimpleContextProvider);\n\nsuite('context-provider', () => {\n  let provider: SimpleContextProvider;\n  let consumer: MultipleContextConsumer;\n\n  setup(async () => {\n    const container = document.createElement('div');\n    container.innerHTML = `\n      <simple-context-provider>\n        <multiple-context-consumer></multiple-context-consumer>\n      </simple-context-provider>\n    `;\n    document.body.appendChild(container);\n\n    provider = container.querySelector(\n      'simple-context-provider'\n    ) as SimpleContextProvider;\n    assert.isDefined(provider);\n    consumer = provider.querySelector(\n      'multiple-context-consumer'\n    ) as MultipleContextConsumer;\n    assert.isDefined(consumer);\n  });\n\n  test(`consumer receives a context`, async () => {\n    assert.strictEqual(consumer.value, 1000);\n  });\n\n  test(`consumer receives updated context on provider change`, async () => {\n    assert.strictEqual(consumer.value, 1000);\n    provider.setValue(500);\n    assert.strictEqual(consumer.value, 500);\n  });\n\n  test(`multiple consumers receive the same context`, async () => {\n    const container = document.createElement('div');\n    container.innerHTML = `\n      <multiple-context-consumer>\n      </multiple-context-consumer>\n    `;\n    provider.appendChild(container);\n    const consumer2 = container.querySelector(\n      'multiple-context-consumer'\n    ) as MultipleContextConsumer;\n    assert.isDefined(consumer2);\n\n    assert.strictEqual(consumer.value, 1000);\n    assert.strictEqual(consumer2.value, 1000);\n\n    provider.setValue(500);\n    assert.strictEqual(consumer.value, 500);\n    assert.strictEqual(consumer2.value, 500);\n  });\n  test(`one-time consumers only receive context once`, async () => {\n    const container = document.createElement('div');\n    container.innerHTML = `\n      <once-context-consumer>\n      </once-context-consumer>\n    `;\n    provider.appendChild(container);\n    const consumer2 = container.querySelector(\n      'once-context-consumer'\n    ) as OnceContextConsumer;\n    assert.isDefined(consumer2);\n\n    assert.strictEqual(consumer.value, 1000);\n    assert.strictEqual(consumer2.value, 1000);\n\n    provider.setValue(500);\n    assert.strictEqual(consumer.value, 500);\n    assert.strictEqual(consumer2.value, 1000); // one-time consumer still has old value\n  });\n});\n"]}