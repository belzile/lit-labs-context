{"version":3,"file":"context-consumer.js","sources":["../../src/lib/controllers/context-consumer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextRequestEvent} from '../context-request-event.js';\nimport {ContextKey, ContextType} from '../context-key.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\n/**\n * ContextConsumer is a ReactiveController which binds a custom-element's\n * lifecycle to the Context API. When an element is connected to the DOM it\n * will emit the context-request event, invoking the callback set on the\n * controller when the context request is satisfied. It will also call\n * the dispose method provided by the Context API when the element is\n * disconnected.\n */\nexport class ContextConsumer<\n  Context extends ContextKey<unknown, unknown>,\n  HostElement extends ReactiveElement\n> implements ReactiveController\n{\n  private provided = false;\n\n  public value?: ContextType<Context> = undefined;\n\n  constructor(\n    protected host: HostElement,\n    private context: Context,\n    private callback?: (\n      value: ContextType<Context>,\n      dispose?: () => void\n    ) => void,\n    private subscribe: boolean = false\n  ) {\n    this.host.addController(this);\n  }\n\n  private unsubscribe?: () => void;\n\n  hostConnected(): void {\n    this.dispatchRequest();\n  }\n  hostDisconnected(): void {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = undefined;\n    }\n  }\n\n  private dispatchRequest() {\n    this.host.dispatchEvent(\n      new ContextRequestEvent(\n        this.context,\n        (value, unsubscribe) => {\n          // some providers will pass an unsubscribe function indicating they may provide future values\n          if (this.unsubscribe) {\n            // if the unsubscribe function changes this implies we have changed provider\n            if (this.unsubscribe !== unsubscribe) {\n              // cleanup the old provider\n              this.provided = false;\n              this.unsubscribe();\n            }\n            // if we don't support subscription, immediately unsubscribe\n            if (!this.subscribe) {\n              this.unsubscribe();\n            }\n          }\n\n          // store the value so that it can be retrieved from the controller\n          this.value = value;\n          // schedule an update in case this value is used in a template\n          this.host.requestUpdate();\n\n          // only invoke callback if we are either expecting updates or have not yet\n          // been provided a value\n          if (!this.provided || this.subscribe) {\n            this.provided = true;\n            if (this.callback) {\n              this.callback(value, unsubscribe);\n            }\n          }\n\n          this.unsubscribe = unsubscribe;\n        },\n        this.subscribe\n      )\n    );\n  }\n}\n"],"names":["ContextConsumer","constructor","host","context","callback","subscribe","this","undefined","addController","hostConnected","dispatchRequest","hostDisconnected","unsubscribe","dispatchEvent","ContextRequestEvent","value","provided","requestUpdate"],"mappings":";;;;;SAkBaA,EASXC,YACYC,EACFC,EACAC,EAIAC,GAAqB,GANnBC,UAAAJ,EACFI,aAAAH,EACAG,cAAAF,EAIAE,eAAAD,EAXFC,eAAW,EAEZA,gBAA+BC,EAWpCD,KAAKJ,KAAKM,cAAcF,MAK1BG,gBACEH,KAAKI,kBAEPC,mBACML,KAAKM,cACPN,KAAKM,cACLN,KAAKM,iBAAcL,GAIfG,kBACNJ,KAAKJ,KAAKW,cACR,IAAIC,EACFR,KAAKH,SACL,CAACY,EAAOH,KAEFN,KAAKM,cAEHN,KAAKM,cAAgBA,IAEvBN,KAAKU,UAAW,EAChBV,KAAKM,eAGFN,KAAKD,WACRC,KAAKM,eAKTN,KAAKS,MAAQA,EAEbT,KAAKJ,KAAKe,gBAILX,KAAKU,WAAYV,KAAKD,YACzBC,KAAKU,UAAW,EACZV,KAAKF,UACPE,KAAKF,SAASW,EAAOH,IAIzBN,KAAKM,YAAcA,IAErBN,KAAKD"}