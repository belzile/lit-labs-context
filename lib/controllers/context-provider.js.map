{"version":3,"file":"context-provider.js","sources":["../../src/lib/controllers/context-provider.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextRequestEvent} from '../context-request-event.js';\nimport {ContextKey, ContextType} from '../context-key.js';\nimport {ValueNotifier} from '../value-notifier.js';\nimport {ReactiveController, ReactiveElement} from 'lit';\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-provider' event can be emitted by any element which hosts\n     * a context provider to indicate it is available for use.\n     */\n    'context-provider': ContextProviderEvent<ContextKey<unknown, unknown>>;\n  }\n}\n\nexport class ContextProviderEvent<\n  Context extends ContextKey<unknown, unknown>\n> extends Event {\n  /**\n   *\n   * @param context the context which this provider can provide\n   */\n  public constructor(public readonly context: Context) {\n    super('context-provider', {bubbles: true, composed: true});\n  }\n}\n\n/**\n * A ReactiveController which can add context provider behavior to a\n * custom-element.\n *\n * This controller simply listens to the `context-request` event when\n * the host is connected to the DOM and registers the received callbacks\n * against its observable Context implementation.\n */\nexport class ContextProvider<T extends ContextKey<unknown, unknown>>\n  extends ValueNotifier<ContextType<T>>\n  implements ReactiveController\n{\n  constructor(\n    protected host: ReactiveElement,\n    private context: T,\n    initialValue?: ContextType<T>\n  ) {\n    super(initialValue);\n    this.host.addController(this);\n    this.attachListeners();\n  }\n\n  public onContextRequest = (\n    ev: ContextRequestEvent<ContextKey<unknown, unknown>>\n  ): void => {\n    if (ev.context !== this.context) {\n      return;\n    }\n    ev.stopPropagation();\n    this.addCallback(ev.callback, ev.subscribe);\n  };\n\n  private attachListeners() {\n    this.host.addEventListener('context-request', this.onContextRequest);\n  }\n\n  hostConnected(): void {\n    // emit an event to signal a provider is available for this context\n    this.host.dispatchEvent(new ContextProviderEvent(this.context));\n  }\n}\n"],"names":["ContextProviderEvent","Event","constructor","context","super","bubbles","composed","this","ContextProvider","ValueNotifier","host","initialValue","ev","stopPropagation","addCallback","callback","subscribe","addController","attachListeners","addEventListener","onContextRequest","hostConnected","dispatchEvent"],"mappings":";;;;;SAqBaA,UAEHC,MAKRC,YAAmCC,GACjCC,MAAM,mBAAoB,CAACC,SAAS,EAAMC,UAAU,IADnBC,aAAAJ,SAaxBK,UACHC,EAGRP,YACYQ,EACFP,EACRQ,GAEAP,MAAMO,GAJIJ,UAAAG,EACFH,aAAAJ,EAQHI,sBACLK,IAEIA,EAAGT,UAAYI,KAAKJ,UAGxBS,EAAGC,kBACHN,KAAKO,YAAYF,EAAGG,SAAUH,EAAGI,aAXjCT,KAAKG,KAAKO,cAAcV,MACxBA,KAAKW,kBAaCA,kBACNX,KAAKG,KAAKS,iBAAiB,kBAAmBZ,KAAKa,kBAGrDC,gBAEEd,KAAKG,KAAKY,cAAc,IAAItB,EAAqBO,KAAKJ"}